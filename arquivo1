#print

print ('Hellow world!')
print ("Hellow World")

print (2+2)

print ('2+2')
print ('2'+'2')

2+2
2-2
2*2
2/2

'2'+'2'

print ('olá' + 2)
print ('olá' + '2')
print ('olá' , 2)

print('1,2,3,4,5,6,7,8,9,10)

print('1,2,3,4,5,6,7,8,9,10, sep='/')
print('1,2,3,4,5,6,7,8,9,10, sep='-')
print('1,2,3,4,5,6,7,8,9,10, sep='==')
print('1,2,3,4,5,6,7,8,9,10, sep='~')

print('Ola','Mundo', sep='~')

print('Ola, Mundo! ', end ='')
print('Ciao, Mondo! ')
print('Helow, World!')

print('Ola, Mundo! ', end ='')
print('Ciao, Mondo! ',  end ='')
print('Helow, World!')

print('Ola, Mundo! ', end ='&')
print('Ciao, Mondo! ',  end ='&')
print('Helow, World!')

print('Ola, Mundo! ', end ='& ')
print('Ciao, Mondo! ',  end ='& ')
print('Helow, World! ', end = '\n')
print('Halo, Welt! ', end = '& ')
print('Bonjour, le monde! ')

#Comentário

#Em python é possível comentar o código utilizando o carctaer #

print('Ola, Mundo!') #Linha 1, português
print('Ciao, Mondo!') #Linha 2, italiano
print('Helow, World!') #Linha3, Inglês
print('Halo, Welt!') #Linha4, alemão
print('Bonjour, le monde!') #Linha 5, francês


'''
É possível comentar várias
linhas utilizando várias aspas
consectuvas
'''

print('Ola, Mundo!') #Linha 1, português
print('Ciao, Mondo!') #Linha 2, italiano
print('Helow, World!') #Linha3, Inglês
print('Halo, Welt!') #Linha4, alemão
print('Bonjour, le monde!') #Linha 5, francês


#variaveis
#valor inteiro (int)

variavel1 = 10
variavel2 = 20
variavel3 = 30

variavel1
variavel2
variavel3

variavel1 + variavel2
variavel 3 - variavel 1
variavel1 + 2
variavel2 * 4
variavel3 / 6

valor1 = 50
valor2 = 100
valor3 = 200

valor1
valor2
valor3

valor1 + variavel2
variavel3 * valor2
valor3 / variavel1

#Uso de () nas operações
#PEMDAS

(variavel1 + valor2) / variavel3
variavel1 + valor/ / variavel3


#a linguagem Python é case sensitive, ou seja, ela
#diferencia letras maiúsculas de minúsculas.

c1 = Centro-1
C1 = Correspondencia-1

#Atribuindo valores a várias variáveis
idade_rafael, idade_marcos, idade_lucas = 15,20,30
print(idade_rafael, idade_marcos, idade_lucas)

end_rafael, end_marcos, end_lucas = 'Rua dos ipes', 'Rua das margaridas', 'Rua das araucarias'
print(end_rafael, end_marcos, end_lucas)

#Print com texto e valor de variáveis junto
idade_joao = 18
idade_pedro = 20
idade_francisco = 30

idade_joao
idade_pedro
idade_francisco

print ('a idade do João é' , idade_joao)
print ('a idade do Pedro é' , idade_pedro)
print ('a idade do Francisco é' , idade_francisco)

print ('a idade do João é' , idade_joao, 'e ele recebe', valor1, 'por hora')
print ('a idade do Pedro é' , idade_pedro, 'e ele recebe', valor2, 'por hora')
print ('a idade do Francisco é' , idade_francisco, 'e ele recebe', valor3, 'por hora')

#Exercício: A idade do __________ é ______, ele recebe R$ ____ por hora e já trabalhou ____ horas este mês.

#Sendo que
          #João recebe valor1 e já trabalhou variavel1
          #Pedro recebe valor2 e já trabalhou variavel2
          #Francisco recebe valor3 e já trabalhou variavel3


var1 = 10
var2 = var1
var3 = var2

print(var1,var2,var3)

var1 = 30
var2 = var1
var3 = var2
var4 = var1 + 20
var5 = var4 + 10

print(var1,var2,var3, var4, var5)

#Em python não é possível nomear variáveis com nomes que iniciam com número

cod1 = 7654321
1cod = 7654321 #erro

#Operadores aritiméticos
variavel1 + variavel2
variavel1 - variavel2
variavel1 * variavel2
variavel1 / variavel2

5**3 #exponenciação
10//9 #extração da parte inteira da divisão
7%2 #módulo (retorna o resto da divisão)

#Operadores relacionais

2 > 2
4 < 2
2.1 < 2
3 == 2
2 == 2

#Operadores relacionais compostos

2 >= 2
2.1 >= 2
2 <= 2
2.1 <= 2

#Operadores lógicos

True
False

#Conectivos

x = 1
print(x > 0) and (x > 100)
False

x = 1
print(x > 0) and (x < 100)
True

x = 1
print(x > 0) or (x > 100)
True

x = 1
print(x > 0) and (x < 100)
True

#Atribuição

a = 10
print(a)

a = b = 20
print(a)
print(b)






variavel1 + variavel2 + variavel3
variavel1 + (variavel2*variavel3)
variavel1 + (variavel2/variavel3*variavel1)

#Exercício: João e Pedro já trabalharam juntos _____ horas este mês.
#Exercicio: Francisco trabalhou nesta semana ________ horas a mais que João.
#Exercicio: João e Pedro juntos trabalharam ______ horas a mais que Francisco sozinho.
#Exercicio: Francisco sozinho trabalhou apenas ____ horas a menos que João e Pedro juntos.


#Declarando strings (str)
variavel4 = 'palavra'
variavel5 = 'bio'
variavel6 = 'logia'

#Concatenar variáveis de valor string
variavel5 + variavel6 (bio + logia)

#Exercício: O cargo do João nesta empresa é ____________.
  #Sendo que:
    #joão é Auxiliar administrativo.
    
#Exercício: O cargo do João nesta empresa é _____________, do Pedro _______________ e do Francisco _______________.
  #Sendo que:
    #joão é o funcionario 1 e é Auxiliar administrativo.
    #Pedro é o funcionario 2 e é Gerente.
    #Francisco é o funcionario 3 e é Diretor.
    
funcionario1 = 'Joao'
funcionario2 = 'Pedro'
funcionario3 = 'Francisco'

cargo1 = 'auxiliar administrativo'
cargo2 = 'gerente'
cargo3 = 'diretor'

#Exercício: A idade do __________ é ______, ele ocupa o cargo de ___________ ele recebe R$ ____ por hora e já trabalhou ____ horas este mês. 

#Lista de palavras reservadas
import keyword
print(keyword.kwlist)

#manipulação de strings

teste = ('python')
print(len(teste))
print(teste.capitalize())

teste2 = ('paralelepipido')
print(teste2.count('a')) #count()
print(teste2.count('e')) #count()
print(teste2.count('i')) #count()
print(teste2.count('o')) #count()
print(teste2.count('u')) #count()

print(teste2.startswith('para')) #startswith
print(teste2.startswith('ara')) #startswith

print(teste2.endswith('pido')) #endswith
print(teste2.endswith('pida')) #endswith

teste3 = ('!@#$%a')
teste4 = ('2aa2213')
teste5 = ('abcde')
teste6 = ('Abcde')
teste7 = ('ABCDE')


print(teste3.isalnum())
print(teste4.isalnum())
print(teste5.isalpha())
print(teste6.islower())
print(teste7.islower())
print(teste7.isupper())
print(teste.lower())
print(teste5.upper())
print(teste6.swapcase())

teste8 = ('estudo de python')

print(teste8.title())
print(teste8.split())
print(teste8.replace('python','programação'))

print(teste2.find('e'))
print(teste2.find('a'))
print(teste2.find('p'))

print(len(teste2))
print(teste2.ljust(18))
print(teste2.rjust(18))
print(teste2.center(18))

teste9 = ('   -python-esquerda')
teste10 = ('python-direita   ')
teste11 = ('   python-esq-dir   ')

print(teste9)
print(teste10)

print(teste9.lstrip())
print(teste10.rstrip())

print(teste11)
print(teste11.strip())


#Fatiamento de string

var1 = ('python')
print (var1[1:4])
print (var1[0:3])
print (var1[3:8])

Exercício: Crie uma senha automática para o usuário com os seguintes critérios
          -3primeiras letras do primeiro nome
          -3primeiras letras do segundo nome
          -ano de nascimento

first_name = ('Alex')
last_name = ('Avancini')
area = ('Financeiro')

fname = (first_name[0:3])
lname = (last_name[0:3])

print(fname+lname+area)


#Type
#Testar e verificar o tipo da variável
type(2) is int
(True or False)

type(2.2) is float
(True or False)
#float pode registrar o valor de até 15 casas decimais depois da vírgula

#Exercicio: O salario do Mario é R$998,37.

#type

print(type(2))
print(type(2.345))
print(type('dois'))
print(type(True))
print(type(False))

print(type(2) is int)
print(type(2.345) is float)
print(type('dois') is str)
print(type(True) is bool)
print(type(False) is bool)



type(2+2j) is complex
(True or False)

type({}) is dict
(True or False)

a = 10
type(a)

b = 'biologia'
type(b)

c = 2.2
type(c)

print(a, "o type de a e", type(a))
print(b, "o type de b e", type(b))
print(c, "o type de c e", type(c))

#isistance
print(a, "é um numero inteiro?", isinstance(a,int))
print(a, "é um numero inteiro?", isinstance(a,str))
print(a, "é um numero inteiro?", isinstance(a,complex))

print(a, "é um numero inteiro?", isinstance(10,int))
print(b, "é um uma string?", isinstance(biologia,int))

#Lista e tupple

lista1 = 2,4,6,8,10
print(type(lista1))
print(type(lista1)) is list

lista2 = [20,40,60,80,100]
print(type(lista2))
print(type(lista2)) is list

#tupple, dados imutaveis
#lista, dados modificáveis

#Equivalente a lista com parenteses (), lista tupple.
print lista1
print lista1[0]
print lista1[1]
print lista1[2]
print lista1[3]
print lista1[4]
print lista1[0:3]
print lista1[2:]

#Alterando uma lista
lista1[2]=20

#Lista tupple é uma lista fixa no modificada, definida nomomento da criação da variavel em lista, seu sinal é os ();
#Se não colocar parenteses no ato da criação da variável, equivale ao parenteses.

#Criando uma lista não tupple []

lista1 = [2,4,6,8,10]
lista1[2]=20
lista1


lista1 = 2,4,6,8,10
lista2 = [20,40,60,80,100]
#lista1[1]=400
lista2[1]=3
print(lista1[1])
print(lista2[1])


#String
palavra = 'biologia'
palavra
palavra[2]
palavra[4:]
palavra [3:6]
#Gerando um erro
#String são inalterados em python
palavra [1]='y'

#set {}
#set é uma lista declarada de variáveis que passam a ser mostradas em ordem desordenada. 
#A ordem da desordenação da lista varia de acordo com cada vez que é declarada

lista2 = {2, 4, 6, 8, 10}
lista2
lista2 = {10, 8 , 6, 4, 2}
lista2
lista2 = {8, 6, 4, 10, 2}
lista2
#A função SET não aceita repetições, retirando na hora da impreção os números repetidos
lista3 = {2, 2, 2, 4 , 4, 6, 8, 10}
lista3
#A função SET também não aceita filtrar os dados da lista com a função =[]
lista3=[2]

#Tratando os valores como convertidos entre os tipos de dados
#Converter um valor de variavel int para str é possível

#Convertendo um valor float em int
nota1 = int(9.8)
print(nota1, type(nota1))

#um valor float não informado ficando float
nota2 = 9.8
print(nota2, type(nota2))

#Convertendo um valor int em float
nota3 = float(7)
print(nota3, type(nota3))

#Convertendo um valor int em str
nota4 = str(6)
print(nota4, type(nota4))

#Convertendo um valor float em str
nota5 = str(7.7)
print(nota5, type(nota5))

#Convertendo str em int
nota6 = int('5')
print(nota6, type(nota6))

#Convertendo str em float
nota7 = float('5')
print(nota7, type(nota7))



#Faltou acrescentar o dictionary (dict)

#Download deste arquivo via terminal:
wget https://raw.githubusercontent.com/alexavancini/python/master/arquivo1

#Download pela pela página via brownser
https://github.com/alexavancini/python
