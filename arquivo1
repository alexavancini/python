#variaveis

print ('Hellow world!')
print ("Hellow World")

print (2+2)

print ('2+2')
print ('2'+'2')

2+2
2-2
2*2
2/2

'2'+'2'

print ('olá' + 2)
print ('olá' + '2')
print ('olá' , 2)


#valor inteiro (int)
variavel1 = 10
variavel2 = 20
variavel3 = 30

variavel1
variavel2
variavel3

valor1 = 50
valor2 = 100
valor3 = 200

valor1
valor2
valor3

idade_joao = 18
idade_pedro = 20
idade_francisco = 30

idade_joao
idade_pedro
idade_francisco

print ('a idade do João é' , idade_joao)
print ('a idade do Pedro é' , idade_pedro)
print ('a idade do Francisco é' , idade_francisco)

print ('a idade do João é' , idade_joao, 'e ele recebe', valor1, 'por hora')
print ('a idade do Pedro é' , idade_pedro, 'e ele recebe', valor2, 'por hora')
print ('a idade do Francisco é' , idade_francisco, 'e ele recebe', valor3, 'por hora')

#Exercício: A idade do __________ é ______, ele recebe R$ ____ por hora e já trabalhou ____ horas este mês.

#Sendo que
          #João recebe valor1 e já trabalhou variavel1
          #Pedro recebe valor2 e já trabalhou variavel2
          #Francisco recebe valor3 e já trabalhou variavel3

#Operações matemáticas com valor inteiro
variavel1 + variavel2
variavel1 - variavel2
variavel1 * variavel2
variavel1 / variavel2

variavel1 + variavel2 + variavel3
variavel1 + (variavel2*variavel3)
variavel1 + (variavel2/variavel3*variavel1)

#Exercício: João e Pedro já trabalharam juntos _____ horas este mês.
#Exercicio: Francisco trabalhou nesta semana ________ horas a mais que João.
#Exercicio: João e Pedro juntos trabalharam ______ horas a mais que Francisco sozinho.
#Exercicio: Francisco sozinho trabalhou apenas ____ horas a menos que João e Pedro juntos.


#Declarando strings (str)
variavel4 = 'palavra'
variavel5 = 'bio'
variavel6 = 'logia'

#Concatenar variáveis de valor string
variavel5 + variavel6 (bio + logia)

#Exercício: O cargo do João nesta empresa é ____________.
  #Sendo que:
    #joão é Auxiliar administrativo.
    
#Exercício: O cargo do João nesta empresa é _____________, do Pedro _______________ e do Francisco _______________.
  #Sendo que:
    #joão é o funcionario 1 e é Auxiliar administrativo.
    #Pedro é o funcionario 2 e é Gerente.
    #Francisco é o funcionario 3 e é Diretor.
    
funcionario1 = 'Joao'
funcionario2 = 'Pedro'
funcionario3 = 'Francisco'

cargo1 = 'auxiliar administrativo'
cargo2 = 'gerente'
cargo3 = 'diretor'

#Exercício: A idade do __________ é ______, ele ocupa o cargo de ___________ ele recebe R$ ____ por hora e já trabalhou ____ horas este mês. 

#Lista de palavras reservadas
import keyword
print(keyword.kwlist)

#Type para testar o tipo da variável
type(2) is int
(True or False)

type(2.2) is float
(True or False)
#float pode registrar o valor de até 15 casas decimais depois da vírgula

#Exercicio: O salario do Mario é R$998,37.




type(2+2j) is complex
(True or False)

type('teste') is str
(True or False)

type([2, 4, 6, 8, 10, 12]) is list
(True or False)

type({}) is dict
(True or False)

a = 10
type(a)

b = 'biologia'
type(b)

c = 2.2
type(c)

print(a, "o type de a e", type(a))
print(b, "o type de b e", type(b))
print(c, "o type de c e", type(c))

#isistance
print(a, "é um numero inteiro?", isinstance(a,int))
print(a, "é um numero inteiro?", isinstance(a,str))
print(a, "é um numero inteiro?", isinstance(a,complex))

print(a, "é um numero inteiro?", isinstance(10,int))
print(b, "é um uma string?", isinstance(biologia,int))

#Lista
lista1 = 2, 4, 6, 8, 10
#Equivalente a lista com parenteses (), lista tupple.
print lista1
print lista1[0]
print lista1[1]
print lista1[2]
print lista1[3]
print lista1[4]
print lista1[0:3]
print lista1[2:]

#Alterando uma lista
lista1[2]=20

#Lista tupple é uma lista fixa no modificada, definida nomomento da criação da variavel em lista, seu sinal é os ();
#Se não colocar parenteses no ato da criação da variável, equivale ao parenteses.

#Criando uma lista não tupple []
lista1 = [2,4,6,8,10]
lista1[2]=20
lista1

#String
palavra = 'biologia'
palavra
palavra[2]
palavra[4:]
palavra [3:6]
#Gerando um erro
#String são inalterados em python
palavra [1]='y'

#set {}
#set é uma lista declarada de variáveis que passam a ser mostradas em ordem desordenada. 
#A ordem da desordenação da lista varia de acordo com cada vez que é declarada

lista2 = {2, 4, 6, 8, 10}
lista2
lista2 = {10, 8 , 6, 4, 2}
lista2
lista2 = {8, 6, 4, 10, 2}
lista2
#A função SET não aceita repetições, retirando na hora da impreção os números repetidos
lista3 = {2, 2, 2, 4 , 4, 6, 8, 10}
lista3
#A função SET também não aceita filtrar os dados da lista com a função =[]
lista3=[2]

#Tratando os valores como convertidos entre os tipos de dados
#Converter um valor de variavel int para str é possível
#Mas converter um valor de variavel str em int não.
variavel1
varialve2
variavel3
variavel4
variavel5
str(variavel1)
int(variavel4)
str(variavel2)
int(variavel5)
#Converter uma variável int em float é possível
float(variavel1)
#Converter uma variável float em int é possível também
int(2.5)
#Converter uma variável flot em str é possível
variavel7 = 2.5
type(variavel7)
str(variavel7)

#Faltou acrescentar o dictionary (dict)

#Download deste arquivo via terminal:
wget https://raw.githubusercontent.com/alexavancini/python/master/arquivo1

#Download pela pela página via brownser
https://github.com/alexavancini/python
